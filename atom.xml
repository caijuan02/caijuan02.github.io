<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔡娟-爱学习的小前端</title>
  <subtitle>勤能补拙</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caijuan02.github.io/"/>
  <updated>2017-12-25T09:47:18.967Z</updated>
  <id>https://caijuan02.github.io/</id>
  
  <author>
    <name>蔡娟</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些模糊的知识点</title>
    <link href="https://caijuan02.github.io/2017/10/19/fuzzy-knowledge/"/>
    <id>https://caijuan02.github.io/2017/10/19/fuzzy-knowledge/</id>
    <published>2017-10-18T16:00:00.000Z</published>
    <updated>2017-12-25T09:47:18.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><ul>
<li>浏览器缓存是浏览器自动缓存的<a id="more"></a></li>
<li>浏览器缓存机制是http协议的缓存机制，但是有的不是，比如html meta标签，会重新发送请求</li>
<li>http缓存机制是由多个策略控制的，比如有Expires，类似于有一些属性来控制浏览器是否缓存，Cache-control 是比较常用的，有一些属性来告诉浏览器是否要缓存，缓存的时间等。</li>
<li>浏览器缓存主要有</li>
</ul>
<ol>
<li>cookie：主要用来记录用户信息，用户名和密码</li>
<li>localStorage：本地缓存，没有时间限制</li>
<li>sessionStorage：会话缓存，当打开会话时进行缓存，关闭会话缓存到期</li>
</ol>
<h3 id="get-和-post-的区别"><a href="#get-和-post-的区别" class="headerlink" title="get 和 post 的区别"></a>get 和 post 的区别</h3><ul>
<li>get和post是http 请求的两种方法，本质上是没有区别的</li>
<li>两种不同的方式，当然会有不同，get会把参数存到url中，post不会，所以post相对比较安全</li>
<li>get有大小限制，post没有</li>
<li>get请求会被浏览器主动cache，参数会保留在历史记录里，而post不会，</li>
</ul>
<h3 id="在浏览器输入url地址到页面加载完成发生了什么事"><a href="#在浏览器输入url地址到页面加载完成发生了什么事" class="headerlink" title="在浏览器输入url地址到页面加载完成发生了什么事"></a>在浏览器输入url地址到页面加载完成发生了什么事</h3><ol>
<li>浏览器接受url，url中包含的信息</li>
<li>将url与缓存进行对比，判断该请求在浏览器中的缓存是否过期，如果没有过期则存储这个响应然后浏览器进行解码渲染，如果过期的话则要进行下一步判断</li>
<li>当缓存过期时，浏览器向服务器发送请求询问资源是否真的过期，这时会用的缓存的信息，比如cache-control 如果真的过期则进行下一步</li>
<li>看网络地址是否是ip，如果不是要进行DNS解析域名，首先会匹配本地host文件中的映射关系，然后查看本地DNS解析器缓存，然后查看本地DNS服务器</li>
<li>浏览器向服务器进行三次握手发送http请求</li>
<li>浏览器跟服务器建立连接后，服务器返回htpp响应</li>
<li>浏览器接收服务器的htpp响应，根据htpp状态码做出不同的处理方式</li>
<li>浏览器拿到html文件，进行解码，遇到js、css、图片要跟服务器发起请求</li>
<li>浏览器渲染</li>
<li>保持连接或者进行四次挥手关闭连接</li>
</ol>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式是一种规则，可以查找或者替换匹配该规则的字符<br>通常用到以下几种js的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str = <span class="string">'1234qwertyuiop123'</span>;</div><div class="line">var reg = /[<span class="number">0</span><span class="number">-9</span>]+/g;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>match() 获取目标字符串中匹配正则表达式的字符，返回一个数组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(str.match(reg));</div></pre></td></tr></table></figure>
</li>
<li><p>test() 判断目标字符串中是否存在匹配正则表达式的字符，返回boolean ，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(reg.test(str));</div></pre></td></tr></table></figure>
</li>
<li><p>search() 查找目标字符串中匹配正则表达式的第一个子元素的index位置，有则返回index值，没有返回-1</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(str.search(reg));</div></pre></td></tr></table></figure>
</li>
<li><p>replace() 将目标字符串中匹配正则表达式的子元素替换为新的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(str.replace(reg, <span class="string">'hello'</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>split() 按照正则表达式的规则将字符串拆分为数组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(str.split(reg));</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浏览器缓存&quot;&gt;&lt;a href=&quot;#浏览器缓存&quot; class=&quot;headerlink&quot; title=&quot;浏览器缓存&quot;&gt;&lt;/a&gt;浏览器缓存&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器缓存是浏览器自动缓存的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将博客同步到新电脑</title>
    <link href="https://caijuan02.github.io/2017/10/10/sync/"/>
    <id>https://caijuan02.github.io/2017/10/10/sync/</id>
    <published>2017-10-10T04:56:39.000Z</published>
    <updated>2017-12-27T03:01:58.778Z</updated>
    
    <content type="html"><![CDATA[<p>将hexo创建的博客内容同步到新电脑<br><a id="more"></a></p>
<h3 id="将博客同步的文件夹复制到新的电脑中，例如我的是myBlog"><a href="#将博客同步的文件夹复制到新的电脑中，例如我的是myBlog" class="headerlink" title="将博客同步的文件夹复制到新的电脑中，例如我的是myBlog"></a>将博客同步的文件夹复制到新的电脑中，例如我的是myBlog</h3><p>安装hexo: sudo npm install -g hexo-cli<br>可以先在本地服务器中打开博客<br>hexo generate; hexo server</p>
<h3 id="与github连接"><a href="#与github连接" class="headerlink" title="与github连接"></a>与github连接</h3><ul>
<li>检查本地是否有ssh key设置：cd ~/.ssh</li>
<li>生成新的ssh key：ssh-keygen -t rsa -C “joancj826@163.com”<br>-添加ssh key到github<ul>
<li>登录github账户</li>
<li>添加公钥 settings - SSH keys - Add SSH key</li>
<li>复制id_rsa.pub 的公钥内容</li>
</ul>
</li>
</ul>
<h3 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h3><ul>
<li>是github的用户名和邮箱</li>
<li>git config –global user.name “caijuan02” </li>
<li>git config –global user.email “joancj826@163.com”</li>
<li>测试ssh key 是否设置成功：ssh -T git@github.com</li>
</ul>
<h3 id="修改博客内容同步到github"><a href="#修改博客内容同步到github" class="headerlink" title="修改博客内容同步到github"></a>修改博客内容同步到github</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将hexo创建的博客内容同步到新电脑&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-cli 与axios实现数据交互</title>
    <link href="https://caijuan02.github.io/2017/09/15/axios/"/>
    <id>https://caijuan02.github.io/2017/09/15/axios/</id>
    <published>2017-09-15T05:43:39.000Z</published>
    <updated>2017-12-25T09:50:32.529Z</updated>
    
    <content type="html"><![CDATA[<p>axios的使用<br><a id="more"></a></p>
<h3 id="使用axios实现后台的数据交互"><a href="#使用axios实现后台的数据交互" class="headerlink" title="使用axios实现后台的数据交互"></a>使用axios实现后台的数据交互</h3><p>1.首先在项目文件目录下安装 axios   npm install –save axioa<br>2.在项目的main.js中引入axios   import axios from ‘axios’;<br>3.改变原型使用axios<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">axios.default.withCredentials = true;</div><div class="line">Vue.prototype.$axios = axios;</div></pre></td></tr></table></figure></p>
<p>4.在config文件的index.js配置axios<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">    <span class="string">'/api'</span>: &#123;</div><div class="line">        target: <span class="string">'http://dev.njga.kefu.com:8090/'</span>, //设置你调用的接口域名和端口号，别忘了加http</div><div class="line">        changeOrigin: true,</div><div class="line">        pathRewrite: &#123;</div><div class="line">            <span class="string">'^/api'</span>: <span class="string">'/'</span> //用 <span class="string">'/app'</span>代替target里面的地址，后面再调用接口的时候直接用api代替，比如我要调用<span class="string">'http://40.00.100.100:3002/user/add'</span>，直接写‘/api/user/add’即可</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>5.实现请求<br>初始化请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const beforeMounte = function()&#123;</div><div class="line">  console.log(<span class="string">'beforeMounte'</span>);</div><div class="line">  axios.post(<span class="string">'/api/clientservicecenter/clientservicecenterapi/dialog_list'</span>,&#123;</div><div class="line">    page: <span class="string">'0'</span>,</div><div class="line">    page_size: <span class="string">'10'</span>,</div><div class="line">    cs_id: <span class="string">'100000005'</span></div><div class="line">  &#125;).then(function(response)&#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;).catch(function(error)&#123;</div><div class="line">    console.log(error);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new Vue(&#123;</div><div class="line">	beforeMount: beforeMounte, //在挂载前执行</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;axios的使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-router使用</title>
    <link href="https://caijuan02.github.io/2017/09/07/vue-router/"/>
    <id>https://caijuan02.github.io/2017/09/07/vue-router/</id>
    <published>2017-09-07T05:43:39.000Z</published>
    <updated>2017-12-25T09:58:41.050Z</updated>
    
    <content type="html"><![CDATA[<p>在使用vue-cli 时用到vue-router，但是在使用的时候遇到了一些问题，可能是一个小点，但是当时因为不了解，所以也花费了不少的时间来解决这些问题，总结了vue中路由的使用<br><a id="more"></a></p>
<h3 id="实现路由切换"><a href="#实现路由切换" class="headerlink" title="实现路由切换"></a>实现路由切换</h3><p>在src目录下的router的index.js是用来配置路由的，在使用vue-cli构建项目的时候，已经在index.js中引入了’vue-router’，接下来就是在index.js里引入各个组件<br>例如：import Header(一般都是首字母大写) from ‘../components/header(文件路径)’<br>引入组件后 Vue.use(Router) 代表使用vue-router<br>配置路由跳转到不同的页面<br>第一步：一般页面的跳转都是在导航条，导航条又是每个页面都需要用到的写在header.vue文件中，在导航条内容结束的地方要用 router-view 标签来渲染其他内容到这个地方，也就是接下来除了导航条的内容你想写的内容在什么地方，就渲染在什么地方。<br>所有的路由配置都写在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">export default new Router(&#123;</div><div class="line">	linkActiveClass: <span class="string">'active'</span>; 激活状态路由添加类 active</div><div class="line">	routes: []</div><div class="line">&#125;);</div><div class="line">//配置header路由</div><div class="line">&#123;</div><div class="line">	path:<span class="string">'/'</span>,    //默认渲染页面</div><div class="line">	redirect: <span class="string">'/chat'</span>,   //重定向，这个页面加载为chat页面，如果不这样进去的页面可能只显示导航条，没有内容块</div><div class="line">	components: Header,  //组件名</div><div class="line">	name: <span class="string">'头部'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二步：把导航条切换的各个子页面与导航条实现路由切换，嵌套子路由<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	path: <span class="string">'/'</span>,</div><div class="line">	component: Header,</div><div class="line">	name: <span class="string">'设置'</span>,</div><div class="line">	children: [&#123;</div><div class="line">			path: <span class="string">'/setting'</span>,</div><div class="line">			redirect: <span class="string">'/account'</span>, //重定向避免刚打开没点击切换页面出现空白页</div><div class="line">			component: Setting,</div><div class="line">			name: <span class="string">"Setting"</span></div><div class="line">		&#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现路由嵌套后要在页面的元素上添加切换<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-link :to="&#123; name: 'Chat', params: &#123;&#125;&#125;"&gt;</div><div class="line">	&lt;p&gt;内容&lt;/p&gt;</div><div class="line">&lt;router-link&gt;</div></pre></td></tr></table></figure></p>
<p>如果要嵌套多个路由的话，是类似的道理，在写一层 children</p>
<p>设置页面刷新时显示某一页，在App.vue文件的export.default中设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">created:function()&#123;</div><div class="line">	this.$router.replace(<span class="string">'/chat'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用vue-cli 时用到vue-router，但是在使用的时候遇到了一些问题，可能是一个小点，但是当时因为不了解，所以也花费了不少的时间来解决这些问题，总结了vue中路由的使用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue-cli使用</title>
    <link href="https://caijuan02.github.io/2017/08/30/vue-cli/"/>
    <id>https://caijuan02.github.io/2017/08/30/vue-cli/</id>
    <published>2017-08-30T05:43:39.000Z</published>
    <updated>2017-12-25T09:55:07.917Z</updated>
    
    <content type="html"><![CDATA[<p>在公司的一个项目中用到vue，但是之前又没有接触过vue，所以是一边学习一边用，总结了在这个项目中用到的知识和一些技巧<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装步骤按照  <a href="http://www.jianshu.com/p/1626b8643676" target="_blank" rel="external">http://www.jianshu.com/p/1626b8643676</a>  一步一步来就可以了，我当时安装的时候就漏掉了安装 webpack 导致一直安装出错，还有一个小细节就是语法检测规则，这个我安装的时候也忽略掉了，不要安装，结果在写代码的时候报错，还是同事发现这个小问题给解决的</p>
<h2 id="文件-目前用到的文件"><a href="#文件-目前用到的文件" class="headerlink" title="文件(目前用到的文件)"></a>文件(目前用到的文件)</h2><p>1.index.html展示页面，不需要修改<br>2.main.js挂载App使用，也不需要修改，默认只引入路由，如果用到vuex也是需要在这个文件中引用<br>3.App.vue路由渲染的总页面，可以修改全局样式，可以引入自己写的css<br>4.router目录下的index.js是用来配置路由<br>5.assets是放静态资源的，比如css、js、image<br>6.components目录文件是用来放组件的，可以是自己写的，我是把公共的头部header放在这个目录下了<br>7.page目录文件就是用来放你写的其他页面的vue文件<br>8.在用到veux时可以增加文件夹store</p>
<h2 id="项目中遇到的问题"><a href="#项目中遇到的问题" class="headerlink" title="项目中遇到的问题"></a>项目中遇到的问题</h2><h3 id="一-路由"><a href="#一-路由" class="headerlink" title="一.路由"></a>一.路由</h3><p>1.实现路由切换<br>在index.js中引入各个部分<br>import Header(一般都是首字母大写) from ‘../components/header’<br>第一步：写公共的部分，根据我的项目来说，我把公共的头部就是导航条写在header.vue文件中，在导航条底部要用 router-view 标签来渲染其他内容到这个地方，也就是接下来除了导航条的内容你想写的内容在什么地方，就渲染在什么地方。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	path:<span class="string">'/'</span>,    //默认渲染页面</div><div class="line">	redirect: <span class="string">'/chat'</span>,   //重定向，这个页面加载为chat页面，如果不这样进去的页面可能只显示头部，没有内容块</div><div class="line">	components: Header,  //组件名</div><div class="line">	name: <span class="string">'头部'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二步：把导航条切换的各个子页面与导航条实现路由切换，嵌套子路由<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	path: <span class="string">'/'</span>,</div><div class="line">	component: Header,</div><div class="line">	name: <span class="string">'设置'</span>,</div><div class="line">	children: [&#123;</div><div class="line">		path: <span class="string">'/setting'</span>,</div><div class="line">		redirect: <span class="string">'/account'</span>, //重定向避免刚打开没点击切换页面出现空白页</div><div class="line">		component: Setting,</div><div class="line">		name: <span class="string">"Setting"</span></div><div class="line">	&#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现路由嵌套后要在页面的元素上添加切换<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-link :to="&#123; name: 'Chat', params: &#123;&#125;&#125;"&gt;</div><div class="line">	&lt;p&gt;内容&lt;/p&gt;</div><div class="line">&lt;router-link&gt;</div></pre></td></tr></table></figure></p>
<p>如果要嵌套多个路由的话，是类似的道理，在写一层 children</p>
<h3 id="二-小技巧"><a href="#二-小技巧" class="headerlink" title="二.小技巧"></a>二.小技巧</h3><p>1.刷新显示某一页，在App.vue文件的export.default中设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">created:function()&#123;</div><div class="line">	this.$router.replace(<span class="string">'/chat'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.路由激活状态,在路由配置里：linkActiveClass:’active’<br>3.实现路由切换时样式改变，可以利用一个变量取不同的值来实现，<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:class="vueConfig.tabType === 1 ? 'tab_item_selected' : '' "</div></pre></td></tr></table></figure></p>
<p>4.实现数据绑定，使用v-model 文本的长度可以直接使用{ {message.length} }<br>5.可以为一个元素绑定多个事件函数，@click=”click1(),click2()”<br>6.实现文本超过500就不能输入字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">watch:&#123;</div><div class="line">  message() &#123;</div><div class="line">      <span class="keyword">if</span> (this.message.length &gt; <span class="number">500</span>) &#123;</div><div class="line">          this.message = String(this.message).slice(<span class="number">0</span>,<span class="number">500</span>);&#125;</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>message只能在data的第一级<br>7.使用label绑定input点击会触发两次是因为label和input要写在同一级<br>8.获取select选择的值   给select设置id== xx     值为 xx.value</p>
<h3 id="三-vuex"><a href="#三-vuex" class="headerlink" title="三.vuex"></a>三.vuex</h3><p>1.vuex是类似于插件的使用，首先要安装</p>
<p>2.其实就是引入，在main.js中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>; //vuex引入 状态管理</div><div class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'./store/storeIndex.js'</span>; //vuex引入 状态管理</div></pre></td></tr></table></figure></p>
<p>storeIndex.js文件是自己定义的<br>在storeIndex.js文件中还要引入一次：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>; //vuex引入 状态管理</div></pre></td></tr></table></figure></p>
<p>在storeIndex.js文件中还要引入的就是每次写的模块的store状态管理文件<br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./modules/config/config'</span></div></pre></td></tr></table></figure></p>
<p>当然可以把所有的状态都写在一个文件里，这里是因为多人合作，写在不同的文件里比较好维护<br>引入所有文件后要输入 Vue.use(Vuex);<br>3.我知道vuex还是因为我的负责人说这个项目使用vuex管理还有数据的使用比较方便，然后我就开始在网上查找vuex的知识，看了好多遍就是看不懂到底是用来干什么的，也看不懂是如何使用的，每次看的都是迷迷糊糊的，但是没办法啊，还是要看，不然这个项目就进行不下去了。。所以又硬着头皮看了几天，终于有点懂了，虽然不是都明白，但是至少不会拖拉这个项目的进度。</p>
<h4 id="vuex主要就是4个属性-state、getters、actions、mutations"><a href="#vuex主要就是4个属性-state、getters、actions、mutations" class="headerlink" title="vuex主要就是4个属性 state、getters、actions、mutations"></a>vuex主要就是4个属性 state、getters、actions、mutations</h4><p>我现在只是清楚 state 和 mutations 两个的用法。<br>state相当于一个变量的集合，就是把你需要用到的变量放在state下，当然是按照vuex的语法<br>在vue文件中可以使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(this.$store.state.config.autojr.pend_count);</div></pre></td></tr></table></figure></p>
<p>直接使用一般是不推荐的，可以使用计算属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed:&#123;</div><div class="line">  getJrAuto()&#123;</div><div class="line">      <span class="keyword">return</span> this.$store.state.config.autojr.is_assess;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后直接用getJrAuto即可</p>
<p>getters和actions我还弄明白是怎么使用的</p>
<p>mutations是方法的集合，是你自己定义的发放用来改变state中变量的值，<br>语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">changeConfigAuto(state,num)&#123;</div><div class="line">    state.autojr.is_assess = num;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>语法是固定的，就是改变autojr.is_assess赋值为num<br>在vue文件中使用时语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.$store.commit(<span class="string">'changeConfigAuto'</span>,<span class="number">2</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在公司的一个项目中用到vue，但是之前又没有接触过vue，所以是一边学习一边用，总结了在这个项目中用到的知识和一些技巧&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>interview</title>
    <link href="https://caijuan02.github.io/2017/08/06/interview/"/>
    <id>https://caijuan02.github.io/2017/08/06/interview/</id>
    <published>2017-08-05T16:00:00.000Z</published>
    <updated>2017-08-06T07:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端面试总结</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>1、HTML5新增的标签，对语义化的理解<br><a id="more"></a></p>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>1、CSS3的新属性<br>2、盒模型<br>3、实现定宽高和不定宽高的垂直和水平居中<br>4、display设置inline-block 和 block 的区别<br>5、请描述BFC及其如何工作</p>
<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p>1、为什么要用时间委托<br>2、同步和异步的区别<br>3、实现tab切换<br>4、this的用法<br>5、call 和 apply 的区别<br>6、原始数据类型和引用数据类型<br>7、数组去重<br>8、求数组中最大值和第二大值<br>9、get 和 post 的区别<br>10、== 和 === 有什么区别<br>11、一句话介绍闭包及如何使用和为什么使用<br>12、了解原型链吗，使用原型链解决过什么问题</p>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>1、了解框架实现的原理吗<br>2、如果要实现jQuery中的 .hide 会怎么实现</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1、XML 和 json 的区别<br>2、查看加载时间慢的原因<br>3、百度工作内容<br>4、百度要开发一个项目的流程<br>5、在开发中遇到哪些浏览器兼容问题，是怎么解决的<br>6、在开发中遇到哪些比较困难的问题，是怎么解决的<br>7、在开发中在移动端适配中遇到哪些坑<br>8、所有的项目中觉得哪个收获最大，学到的东西最多</p>
<h2 id="开放性"><a href="#开放性" class="headerlink" title="开放性"></a>开放性</h2><p>1、为什么要离开百度<br>2、前端知识中最擅长什么<br>3、对自己的职业规划<br>4、后续学习前端会怎么学习</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端面试总结&lt;/p&gt;
&lt;h2 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h2&gt;&lt;p&gt;1、HTML5新增的标签，对语义化的理解&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js动态效果</title>
    <link href="https://caijuan02.github.io/2017/07/14/animation/"/>
    <id>https://caijuan02.github.io/2017/07/14/animation/</id>
    <published>2017-07-14T05:21:00.000Z</published>
    <updated>2017-08-30T01:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己用css或者js做的动态效果</p>
<p><a href="https://github.com/caijuan02/animation" target="_blank" rel="external">https://github.com/caijuan02/animation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己用css或者js做的动态效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/caijuan02/animation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/caijuan02/anim
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习前端文档</title>
    <link href="https://caijuan02.github.io/2017/07/10/practice/"/>
    <id>https://caijuan02.github.io/2017/07/10/practice/</id>
    <published>2017-07-10T05:43:39.000Z</published>
    <updated>2017-08-30T01:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习资料整理，主要为前端学习相关资料：包括但不限于HTML、CSS、PHP、JS、SMARTY、JQUERY、ZEPTO、LINUX、GIT、NODEJS等。<br><a id="more"></a></p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>《精通CSS：高级Web标准解决方案》</p>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>1.《JavaScriptDOM编程艺术》</p>
<p>2.《高性能JavaScript》</p>
<p>3.《JavaScript精粹》</p>
<p>4.《jQuery技术内幕》（细致的jquery源码讲解）</p>
<ol>
<li><a href="http://www.wenshuai.cn/Manual/Zepto/" target="_blank" rel="external">http://www.wenshuai.cn/Manual/Zepto/</a> （zepto api中文手册）</li>
</ol>
<h2 id="网络方面"><a href="#网络方面" class="headerlink" title="网络方面"></a>网络方面</h2><p>《Web性能权威指南》</p>
<h2 id="linux系统学习"><a href="#linux系统学习" class="headerlink" title="linux系统学习"></a>linux系统学习</h2><p>1.<a href="http://haoqicat.com/ride-cli-monster" target="_blank" rel="external">http://haoqicat.com/ride-cli-monster</a> 视频资料</p>
<p>2.<a href="http://billie66.github.io/TLCL/book/index.html" target="_blank" rel="external">http://billie66.github.io/TLCL/book/index.html</a> 类似电子书，推荐</p>
<p>3.<a href="http://linuxcommand.org/index.php" target="_blank" rel="external">http://linuxcommand.org/index.php</a></p>
<h2 id="SMARTY"><a href="#SMARTY" class="headerlink" title="SMARTY"></a>SMARTY</h2><p><a href="http://www.php100.com/manual/smarty3/" target="_blank" rel="external">http://www.php100.com/manual/smarty3/</a> smarty中文参考手册3.0</p>
<h2 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h2><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/</a></p>
<h2 id="前端博客推荐"><a href="#前端博客推荐" class="headerlink" title="前端博客推荐"></a>前端博客推荐</h2><p> <a href="https://github.com/FrankFang/best-chinese-front-end-blogs" target="_blank" rel="external">https://github.com/FrankFang/best-chinese-front-end-blogs</a><br> <a href="http://www.w3cplus.com/" target="_blank" rel="external">http://www.w3cplus.com/</a></p>
<h2 id="将本地代码上传到自己的github库中"><a href="#将本地代码上传到自己的github库中" class="headerlink" title="将本地代码上传到自己的github库中"></a>将本地代码上传到自己的github库中</h2><p> <a href="http://www.cnblogs.com/lijiayi/p/pushtogithub.html" target="_blank" rel="external">http://www.cnblogs.com/lijiayi/p/pushtogithub.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习资料整理，主要为前端学习相关资料：包括但不限于HTML、CSS、PHP、JS、SMARTY、JQUERY、ZEPTO、LINUX、GIT、NODEJS等。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建博客</title>
    <link href="https://caijuan02.github.io/2017/07/10/firstFile/"/>
    <id>https://caijuan02.github.io/2017/07/10/firstFile/</id>
    <published>2017-07-10T04:56:39.000Z</published>
    <updated>2017-12-27T03:06:25.144Z</updated>
    
    <content type="html"><![CDATA[<p>This is my first blog，I’m really happy.<br>使用hexo 和 github 搭建博客</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ol>
<li>安装npm </li>
</ol>
<ul>
<li>npm会在安装node后自动安装，所以要先安装node。</li>
<li>Node.js安装包及源码下载地址：<a href="https://nodejs.org/en/download/。" target="_blank" rel="external">https://nodejs.org/en/download/。</a></li>
<li>安装完后检查是否安装成功：</li>
<li>在终端输入命令：node -v  或  npm -v<br>  eg: v8.5.0 表示版本号</li>
</ul>
<ol>
<li>安装hexo<br>直接使用npm安装，可以选择全局安装，执行命令<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
</ol>
<p>检查hexo是否安装成功<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<h4 id="初始化博客根目录"><a href="#初始化博客根目录" class="headerlink" title="初始化博客根目录"></a>初始化博客根目录</h4><ol>
<li><p>在本地创建一个文件夹，进入改文件目录下<br>eg:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd Myblog</div></pre></td></tr></table></figure>
</li>
<li><p>初始化改文件夹</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行完以上命令，会在Myblog文件夹下生成一些文件<br>    config.yml //网站的配置信息，您可以在这里配置大部分的参数；<br>    package.json<br>    scaffolds //模板文件夹，当您在新建文章时，hexo会根据 scaffold 来简历文件；<br>    source //存放用户资源的地方，也就是你自己创建的博客文章；<br>    themes //主题文件夹。hexo会根据主题来生成静态页面。</p>
<h4 id="创建自己的博客文章"><a href="#创建自己的博客文章" class="headerlink" title="创建自己的博客文章"></a>创建自己的博客文章</h4><ol>
<li><p>新建一篇文章</p>
<ul>
<li>可以直接在source/(下划线_posts)目录下创建firstFile.md文档</li>
<li>使用命令行创建<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"firstFile"</span> (以下命令都是在Myblog目录下执行)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>生成网站</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate (可简写为 hexo g 每次保存新的文章都需要执行)</div></pre></td></tr></table></figure>
</li>
<li><p>启动本地服务器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server (可简写为 hexo s)</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 预览</p>
</li>
</ol>
<h4 id="连接到github"><a href="#连接到github" class="headerlink" title="连接到github"></a>连接到github</h4><ol>
<li>注册github账号</li>
<li><p>配置秘钥</p>
<ul>
<li>检查本地是否有ssh key设置：cd ~/.ssh</li>
<li>生成新的ssh key：ssh-keygen -t rsa -C “joancj826@163.com”<br>-添加ssh key到github<ul>
<li>登录github账户</li>
<li>添加公钥 settings - SSH keys - Add SSH key</li>
<li>复制id_rsa.pub 的公钥内容</li>
</ul>
</li>
</ul>
</li>
<li><p>配置账户</p>
<ul>
<li>是github的用户名和邮箱</li>
<li>git config –global user.name “caijuan02” </li>
<li>git config –global user.email “joancj826@163.com”</li>
<li>测试ssh key 是否设置成功：ssh -T git@github.com</li>
</ul>
</li>
<li><p>修改博客内容部署到github</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is my first blog，I’m really happy.&lt;br&gt;使用hexo 和 github 搭建博客&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
